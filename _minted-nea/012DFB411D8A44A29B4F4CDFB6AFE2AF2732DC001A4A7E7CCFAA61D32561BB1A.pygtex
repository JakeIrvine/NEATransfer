\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+c1}{//}
\PYG{c+c1}{// Created by jake on 16/11/2020.}
\PYG{c+c1}{//}

\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}../include/CMAPTable.h\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include} \PYG{c+cpf}{\PYGZdq{}../include/util.h\PYGZdq{}}

\PYG{n}{CMAPTable}\PYG{o}{::}\PYG{n}{CMAPTable}\PYG{p}{()} \PYG{p}{\PYGZob{}}

\PYG{p}{\PYGZcb{}}

\PYG{n}{CMAPTable}\PYG{o}{::}\PYG{n}{CMAPTable}\PYG{p}{(}\PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{uint8\PYGZus{}t}\PYG{o}{\PYGZgt{}} \PYG{o}{*}\PYG{n}{data}\PYG{p}{,} \PYG{n}{Header} \PYG{n}{header}\PYG{p}{,} \PYG{k+kt}{char} \PYG{n}{characterToGet}\PYG{p}{)} \PYG{p}{\PYGZob{}}
    \PYG{c+c1}{// Look for the table in the header}
    \PYG{n}{TableHeader} \PYG{n}{table} \PYG{o}{=} \PYG{n}{header}\PYG{p}{.}\PYG{n}{tables}\PYG{p}{[}\PYG{l+s}{\PYGZdq{}cmap\PYGZdq{}}\PYG{p}{];}

    \PYG{n}{parse}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{table}\PYG{p}{.}\PYG{n}{tableOffset}\PYG{p}{,} \PYG{n}{table}\PYG{p}{.}\PYG{n}{length}\PYG{p}{,} \PYG{n}{characterToGet}\PYG{p}{);}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{void} \PYG{n}{CMAPTable}\PYG{o}{::}\PYG{n}{parse}\PYG{p}{(}\PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{uint8\PYGZus{}t}\PYG{o}{\PYGZgt{}} \PYG{o}{*}\PYG{n}{data}\PYG{p}{,} \PYG{k+kt}{int} \PYG{n}{offset}\PYG{p}{,} \PYG{k+kt}{int} \PYG{n}{length}\PYG{p}{,} \PYG{k+kt}{char} \PYG{n}{characterToGet}\PYG{p}{)} \PYG{p}{\PYGZob{}}
    \PYG{c+c1}{// Parsing the cmap table is a bit more complex, there are multiple possible formats it could be in.}
    \PYG{k+kt}{uint16\PYGZus{}t} \PYG{n}{numSubtables} \PYG{o}{=} \PYG{n}{parseu16}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{2}\PYG{p}{);}

    \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{uint16\PYGZus{}t}\PYG{o}{\PYGZgt{}} \PYG{n}{platformIds} \PYG{o}{=} \PYG{p}{\PYGZob{}\PYGZcb{};}
    \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{uint16\PYGZus{}t}\PYG{o}{\PYGZgt{}} \PYG{n}{platformSpecificIds} \PYG{o}{=} \PYG{p}{\PYGZob{}\PYGZcb{};}
    \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{uint32\PYGZus{}t}\PYG{o}{\PYGZgt{}} \PYG{n}{offsets} \PYG{o}{=} \PYG{p}{\PYGZob{}\PYGZcb{};}

    \PYG{c+c1}{// Enumerate the subtables}
    \PYG{k}{for} \PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{4}\PYG{p}{;} \PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{4}\PYG{o}{+}\PYG{p}{(}\PYG{l+m+mi}{8}\PYG{o}{*}\PYG{n}{numSubtables}\PYG{p}{);} \PYG{n}{i}\PYG{o}{+=}\PYG{l+m+mi}{8}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{n}{platformIds}\PYG{p}{.}\PYG{n}{push\PYGZus{}back}\PYG{p}{(}\PYG{n}{parseu16}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{i}\PYG{p}{));}
        \PYG{n}{platformSpecificIds}\PYG{p}{.}\PYG{n}{push\PYGZus{}back}\PYG{p}{(}\PYG{n}{parseu16}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{i}\PYG{o}{+}\PYG{l+m+mi}{2}\PYG{p}{));}
        \PYG{n}{offsets}\PYG{p}{.}\PYG{n}{push\PYGZus{}back}\PYG{p}{(}\PYG{n}{parseu32}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{i}\PYG{o}{+}\PYG{l+m+mi}{4}\PYG{p}{));}
    \PYG{p}{\PYGZcb{}}

    \PYG{k+kt}{uint16\PYGZus{}t} \PYG{n}{subOffset} \PYG{o}{=} \PYG{l+m+mi}{0}\PYG{p}{;}

    \PYG{c+c1}{// Look for a table with type 0/3 or 0/4 (unicode)}
    \PYG{k}{for} \PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;} \PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{numSubtables}\PYG{p}{;} \PYG{n}{i}\PYG{o}{++}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{k}{if}\PYG{p}{(}
                \PYG{n}{platformIds}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{0} \PYG{o}{\PYGZam{}\PYGZam{}}
                \PYG{p}{(}\PYG{n}{platformSpecificIds}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{4} \PYG{o}{||} \PYG{n}{platformSpecificIds}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{==} \PYG{l+m+mi}{3}\PYG{p}{)}
        \PYG{p}{)} \PYG{p}{\PYGZob{}}
            \PYG{n}{subOffset} \PYG{o}{=} \PYG{n}{offsets}\PYG{p}{[}\PYG{n}{i}\PYG{p}{];}
            \PYG{k}{break}\PYG{p}{;}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// If we didn\PYGZsq{}t find a suitable subtable}
    \PYG{k}{if} \PYG{p}{(}\PYG{n}{subOffset} \PYG{o}{==} \PYG{l+m+mi}{0}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{n}{std}\PYG{o}{::}\PYG{n}{abort}\PYG{p}{();} \PYG{c+c1}{// TODO: proper error handling}
    \PYG{p}{\PYGZcb{}}



    \PYG{c+c1}{// So now we know which subtable to use, and we have it\PYGZsq{}s offset}
    \PYG{n}{subOffset} \PYG{o}{=} \PYG{n}{subOffset} \PYG{o}{+} \PYG{n}{offset}\PYG{p}{;}
    \PYG{c+c1}{// Find the subtable format}
    \PYG{k+kt}{uint16\PYGZus{}t} \PYG{n}{subtableFormat} \PYG{o}{=} \PYG{n}{parseu16}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{subOffset}\PYG{p}{);}

    \PYG{c+c1}{// Right now, my font only has a type 4 table}
    \PYG{c+c1}{// TODO: Add support for more subtable types}
    \PYG{k}{if}\PYG{p}{(}\PYG{n}{subtableFormat} \PYG{o}{==} \PYG{l+m+mi}{4}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{n}{parseSubtableType4}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{subOffset}\PYG{p}{,} \PYG{n}{characterToGet}\PYG{p}{);}
    \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{p}{\PYGZob{}}
        \PYG{n}{std}\PYG{o}{::}\PYG{n}{abort}\PYG{p}{();} \PYG{c+c1}{// TODO: add error handling}
    \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{void} \PYG{n}{CMAPTable}\PYG{o}{::}\PYG{n}{parseSubtableType4}\PYG{p}{(}\PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{uint8\PYGZus{}t}\PYG{o}{\PYGZgt{}} \PYG{o}{*}\PYG{n}{data}\PYG{p}{,} \PYG{k+kt}{int} \PYG{n}{offset}\PYG{p}{,} \PYG{k+kt}{char} \PYG{n}{characterToMap}\PYG{p}{)} \PYG{p}{\PYGZob{}}
    \PYG{k+kt}{uint16\PYGZus{}t} \PYG{n}{subtableLength} \PYG{o}{=} \PYG{n}{parseu16}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{2}\PYG{p}{);}
    \PYG{k+kt}{uint16\PYGZus{}t} \PYG{n}{languageCode} \PYG{o}{=} \PYG{n}{parseu16}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{4}\PYG{p}{);}
    \PYG{k+kt}{uint16\PYGZus{}t} \PYG{n}{segCount} \PYG{o}{=} \PYG{n}{parseu16}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{6}\PYG{p}{)} \PYG{o}{/} \PYG{l+m+mi}{2}\PYG{p}{;} \PYG{c+c1}{// This is inexplicably doubled in the file, idk why}

    \PYG{c+c1}{// Next few bytes are weird old optimisation stuff, we can safely ignore them}

    \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{uint16\PYGZus{}t}\PYG{o}{\PYGZgt{}} \PYG{n}{endCodes} \PYG{o}{=} \PYG{p}{\PYGZob{}\PYGZcb{};}
    \PYG{k}{for} \PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{14}\PYG{p}{;} \PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{14}\PYG{o}{+}\PYG{p}{(}\PYG{l+m+mi}{2}\PYG{o}{*}\PYG{n}{segCount}\PYG{p}{);} \PYG{n}{i}\PYG{o}{+=}\PYG{l+m+mi}{2}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{n}{endCodes}\PYG{p}{.}\PYG{n}{push\PYGZus{}back}\PYG{p}{(}\PYG{n}{parseu16}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{i}\PYG{p}{));}
    \PYG{p}{\PYGZcb{}}
    \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{uint16\PYGZus{}t}\PYG{o}{\PYGZgt{}} \PYG{n}{startCodes} \PYG{o}{=} \PYG{p}{\PYGZob{}\PYGZcb{};}
    \PYG{k}{for} \PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{16}\PYG{o}{+}\PYG{p}{(}\PYG{l+m+mi}{2}\PYG{o}{*}\PYG{n}{segCount}\PYG{p}{);} \PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{16}\PYG{o}{+}\PYG{p}{(}\PYG{l+m+mi}{4}\PYG{o}{*}\PYG{n}{segCount}\PYG{p}{);} \PYG{n}{i}\PYG{o}{+=}\PYG{l+m+mi}{2}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{n}{startCodes}\PYG{p}{.}\PYG{n}{push\PYGZus{}back}\PYG{p}{(}\PYG{n}{parseu16}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{i}\PYG{p}{));}
    \PYG{p}{\PYGZcb{}}

    \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{uint16\PYGZus{}t}\PYG{o}{\PYGZgt{}} \PYG{n}{idDeltas} \PYG{o}{=} \PYG{p}{\PYGZob{}\PYGZcb{};}
    \PYG{k}{for} \PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{16}\PYG{o}{+}\PYG{p}{(}\PYG{l+m+mi}{4}\PYG{o}{*}\PYG{n}{segCount}\PYG{p}{);} \PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{16}\PYG{o}{+}\PYG{p}{(}\PYG{l+m+mi}{6}\PYG{o}{*}\PYG{n}{segCount}\PYG{p}{);} \PYG{n}{i}\PYG{o}{+=}\PYG{l+m+mi}{2}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{n}{idDeltas}\PYG{p}{.}\PYG{n}{push\PYGZus{}back}\PYG{p}{(}\PYG{n}{parseu16}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{i}\PYG{p}{));}
    \PYG{p}{\PYGZcb{}}
    \PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{uint16\PYGZus{}t}\PYG{o}{\PYGZgt{}} \PYG{n}{idRangeOffsets} \PYG{o}{=} \PYG{p}{\PYGZob{}\PYGZcb{};}
    \PYG{k}{for} \PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{16}\PYG{o}{+}\PYG{p}{(}\PYG{l+m+mi}{6}\PYG{o}{*}\PYG{n}{segCount}\PYG{p}{);} \PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{offset}\PYG{o}{+}\PYG{l+m+mi}{16}\PYG{o}{+}\PYG{p}{(}\PYG{l+m+mi}{8}\PYG{o}{*}\PYG{n}{segCount}\PYG{p}{);} \PYG{n}{i}\PYG{o}{+=}\PYG{l+m+mi}{2}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{n}{idRangeOffsets}\PYG{p}{.}\PYG{n}{push\PYGZus{}back}\PYG{p}{(}\PYG{n}{parseu16}\PYG{p}{(}\PYG{n}{data}\PYG{p}{,} \PYG{n}{i}\PYG{p}{));}
    \PYG{p}{\PYGZcb{}}

    \PYG{k+kt}{uint16\PYGZus{}t} \PYG{n}{startCode}\PYG{p}{;}
    \PYG{k+kt}{uint16\PYGZus{}t} \PYG{n}{endCode}\PYG{p}{;}
    \PYG{k+kt}{uint16\PYGZus{}t} \PYG{n}{idDelta}\PYG{p}{;}
    \PYG{k+kt}{uint16\PYGZus{}t} \PYG{n}{idRangeOffset}\PYG{p}{;}

    \PYG{c+c1}{// Search for the character in the data structures}
    \PYG{k}{for} \PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;} \PYG{n}{i}\PYG{o}{\PYGZlt{}}\PYG{n}{endCodes}\PYG{p}{.}\PYG{n}{size}\PYG{p}{();} \PYG{n}{i}\PYG{o}{++}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{k}{if} \PYG{p}{(}\PYG{n}{endCodes}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{\PYGZgt{}=} \PYG{n}{characterToMap}\PYG{p}{)} \PYG{p}{\PYGZob{}}
            \PYG{k}{if}\PYG{p}{(}\PYG{n}{startCodes}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]} \PYG{o}{\PYGZlt{}=} \PYG{n}{characterToMap}\PYG{p}{)} \PYG{p}{\PYGZob{}}
                \PYG{c+c1}{// We\PYGZsq{}ve found our character!}
                \PYG{n}{startCode} \PYG{o}{=} \PYG{n}{startCodes}\PYG{p}{[}\PYG{n}{i}\PYG{p}{];}
                \PYG{n}{endCode} \PYG{o}{=} \PYG{n}{endCodes}\PYG{p}{[}\PYG{n}{i}\PYG{p}{];}
                \PYG{n}{idDelta} \PYG{o}{=} \PYG{n}{idDeltas}\PYG{p}{[}\PYG{n}{i}\PYG{p}{];}
                \PYG{n}{idRangeOffset} \PYG{o}{=} \PYG{n}{idRangeOffsets}\PYG{p}{[}\PYG{n}{i}\PYG{p}{];}
                \PYG{k}{break}\PYG{p}{;}
            \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{p}{\PYGZob{}}
                \PYG{n}{std}\PYG{o}{::}\PYG{n}{abort}\PYG{p}{();} \PYG{c+c1}{// oh no}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}

    \PYG{k}{if} \PYG{p}{(}\PYG{n}{idRangeOffset} \PYG{o}{!=} \PYG{l+m+mi}{0}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{n}{std}\PYG{o}{::}\PYG{n}{abort}\PYG{p}{();}
    \PYG{p}{\PYGZcb{}}

    \PYG{n}{glyphIndex} \PYG{o}{=} \PYG{n}{idDelta} \PYG{o}{+} \PYG{n}{characterToMap}\PYG{p}{;}

\PYG{p}{\PYGZcb{}}
\end{Verbatim}
